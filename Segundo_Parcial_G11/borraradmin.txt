from django.contrib import admin
from django.contrib.auth.models import User
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.utils.translation import gettext_lazy as _
from .models import CustomUser, Cart, CartItem, Product

@admin.register(CustomUser)
class CustomUserAdmin(BaseUserAdmin):
    list_display = ('username', 'name', 'email', 'phone_number', 'is_employee', 'is_staff', 'is_active', 'direccion', 'last_login')  # Campos a mostrar en la lista
    search_fields = ('username', 'name', 'email')  # Campos que se pueden buscar
    list_filter = ('is_employee', 'is_staff', 'is_active')  # Filtros en la lista

    fieldsets = (
        (None, {'fields': ('username', 'password')}),
        (_('Personal info'), {'fields': ('name', 'email', 'phone_number')}),
        (_('Permissions'), {'fields': ('is_employee', 'is_active', 'is_superuser', 'is_staff', 'groups', 'user_permissions')}),
        (_('Important dates'), {'fields': ('last_login',)}),
    )

    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'password1', 'password2', 'name', 'email', 'phone_number', 'is_employee', 'is_staff', 'is_active', 'direccion', 'is_superuser'),
        }),
    )

    def save_model(self, request, obj, form, change):
        if change:
            # Si el usuario está siendo editado, asegúrate de no sobrescribir la contraseña
            password = form.cleaned_data.get('password')
            if password:
                obj.set_password(password)  # Cambiar la contraseña de forma segura
        else:
            # Si es un nuevo usuario, establecer la contraseña
            password = form.cleaned_data.get('password1')
            if password:
                obj.set_password(password)

        super().save_model(request, obj, form, change)

    # Personalizar la acción para eliminar usuarios
    actions = ['delete_selected']

    # Asegúrate de que la opción de cambiar contraseña esté disponible en el formulario
    def get_form(self, request, obj=None, **kwargs):
        form = super().get_form(request, obj, **kwargs)
        form.base_fields['password'].widget.attrs['readonly'] = True  # Establecer la contraseña como de solo lectura
        return form



@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = ('name', 'price', 'stock', 'created_at', 'updated_at')  # Campos a mostrar en la lista
    search_fields = ('name',)  # Campos que se pueden buscar

